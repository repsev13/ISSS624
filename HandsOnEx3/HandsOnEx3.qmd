---
title: "Hands-On Exercise 3"
editor: visual
---

## Overview

In this hands-on exercise, I learnt how to delineate homogeneous region by using geographically referenced multivariate data by usuing hierarchical and spatially constrained cluster analysis.

## Getting Started

The code chunk below will install and load rgdal, spdep, tmap, sf, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych and tidyverse packages.

```{r}
pacman::p_load(rgdal, spdep, tmap, sf, ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse)
```

## Data Import and Preparation

### Importing Geospatial Data

```{r}
shan_sf <- st_read(dsn = "data/geospatial", 
                   layer = "myanmar_township_boundaries") %>%
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)"))
shan_sf
```

Reveal the data type of shan_sf's fields

```{r}
glimpse(shan_sf)
```

### Importing Aspatial Data

```{r}
ict <- read_csv ("data/aspatial/Shan-ICT.csv")

summary(ict)
```

### Derive New Variables Using dplyr Package

```{r}
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 

summary(ict_derived)
```

## Exploratory Data Analysis

### EDA Using Statistical Graphics

Histograms are useful to identify the overall distribution of the data values.

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```

Boxplot are useful to detect if there are outliers.

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

Radio penetration rate is plotted below.

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

This shows that the median penetration rate is slightly above 200 and there is one outlier, and the data seems to follow a Poisson distribution.

```{r}
radio <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

tv <- ggplot(data=ict_derived, 
             aes(x= `TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

llphone <- ggplot(data=ict_derived, 
             aes(x= `LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

mphone <- ggplot(data=ict_derived, 
             aes(x= `MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

computer <- ggplot(data=ict_derived, 
             aes(x= `COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

internet <- ggplot(data=ict_derived, 
             aes(x= `INTERNET_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          nrow = 2, ncol = 3)
```

Multiple histograms have been plotted to reveal the distribution of the selected variables in the ict_derived data.frame.

### EDA using Choropleth Map

#### Joining Geospatial Data with Aspatial Data

```{r}
shan_sf <- left_join(shan_sf, ict_derived, by=c("TS_PCODE"="TS_PCODE"))
```

#### Preparing a choropleth map

Distribution of radio penetration rate of Shan State at township level

```{r}
qtm(shan_sf, "RADIO_PR")
```

Reveal that the distribution shown in the choropleth map above is bias to the underlying total number of households at the townships.

```{r}
TT_HOUSEHOLDS.map <- tm_shape(shan_sf) + 
  tm_fill(col = "TT_HOUSEHOLDS",
          n = 5,
          style = "jenks", 
          title = "Total households") + 
  tm_borders(alpha = 0.5) 

RADIO.map <- tm_shape(shan_sf) + 
  tm_fill(col = "RADIO",
          n = 5,
          style = "jenks",
          title = "Number Radio ") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,
             asp=NA, ncol=2)
```

Revealing the distribution of total number of households and radio penetration rate

```{r}
tm_shape(shan_sf) +
    tm_polygons(c("TT_HOUSEHOLDS", "RADIO_PR"),
                style="jenks") +
    tm_facets(sync = TRUE, ncol = 2) +
  tm_legend(legend.position = c("right", "bottom"))+
  tm_layout(outer.margins=0, asp=0)
```

The chloropleth maps shown above indicate that there is no relationship between the number of households and radio penetration rate.

## Correlation Analysis

```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggests that only one of them should be used in the cluster analysis.

## Hierarchy Cluster Analysis

### Extracting Clustering Variables

Clustering variables from the shan_sf simple feature object will be extacted into data.frame.

```{r}
cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars,10)
```

Row numbers will be changed to rows by township name below.

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10)
```

The TS.x field will be deleted as shown below.

```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

### Min-Max Standardisation

Clustering variables will be standardised by using the min-max method below.

```{r}
shan_ict.std <- normalize(shan_ict)
summary(shan_ict.std)
```

### Z-Score Standardisation

Clustering variables will be standardised by using the Z-score method below.

```{r}
shan_ict.z <- scale(shan_ict)
describe(shan_ict.z)
```

### Visualising the Standardised Clustering Variables

Visualisations of the clustering variables areshown below.

```{r}
r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,ncol = 3, nrow = 1)
```

### Computing Proximity Matrix

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')

proxmat
```

### Computing Hierarchical Clustering

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
plot(hclust_ward, cex = 0.6)
```

### Selecting the Optimal Clustering Algorithm

The agglomerative coefficients of all hierarchical clustering algorithms are computed below.

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(shan_ict, method = x)$ac
}

map_dbl(m, ac)
```

### Determining Optimal Clusters

#### Gap Statistic Method

```{r}
set.seed(12345)
gap_stat <- clusGap(shan_ict, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

To visualise the fviz_gap_stat() of factoextra package will be used.

```{r}
fviz_gap_stat(gap_stat)
```

As seen above, we should retain 1 cluster. However, it is not logical to retain only 1 cluster and by examining the graph, we should pick 6 clusters as it has the gives the largest gap statistic.

#### Interpreting the Dendrograms

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, k = 6, border = 2:5)
```

### Visually-Driven Hierarchical Clustering Analysis

#### Transforming the Dataframe into a Matrix and Plotting Interactive Cluster Heatmap

```{r}
shan_ict_mat <- data.matrix(shan_ict)

heatmaply(normalize(shan_ict_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Shan State by ICT indicators",
          xlab = "ICT Indicators",
          ylab = "Townships of Shan State"
          )
```

### Mapping the Clusters Formed

```{r}
groups <- as.factor(cutree(hclust_ward, k=6))

shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)

qtm(shan_sf_cluster, "CLUSTER")
```

It can be seen above that the clusters are very fragmented.

## Spatially Constrained Clustering - SKATER approach

### Converting into SpatialPolygonsDataFrame and Computing Neighbour List

```{r}
shan_sp <- as_Spatial(shan_sf)

shan.nb <- poly2nb(shan_sp)
summary(shan.nb)
```

Thereafter, the neighbours list is plotted onto shan_sp.

```{r}
plot(shan_sp, border=grey(.5))
plot(shan.nb, coordinates(shan_sp), col="blue", add=TRUE)
```

### Calculating Edge Costs

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)

shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style="B")
summary(shan.w)
```

### Computing Minimum Spanning Tree

```{r}
shan.mst <- mstree(shan.w)

class(shan.mst)

dim(shan.mst)

head(shan.mst)
```

The plot method for the MST includes a way to show the observation numbers of the nodes in addition to the edge. Similar to what was done above, this will be plotted together with the township boundaries.

```{r}
plot(shan_sp, border=gray(.5))
plot.mst(shan.mst, 
         coordinates(shan_sp), 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

Computing Spatially Constrained Clusters Using SKATER Method

```{r}
clust6 <- skater(edges = shan.mst[,1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5)

str(clust6)
```

Check cluster assignment below and find out how many observations are in each cluster by means of the table command below.

```{r}
ccs6 <- clust6$groups
ccs6

table(ccs6)
```

Plot the pruned tree that show the five clusters on top of the township area.

```{r}
plot(shan_sp, border=gray(.5))
plot(clust6, 
     coordinates(shan_sp), 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

Visualising the Clusters in Choropleth Map

```{r}
groups_mat <- as.matrix(clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "SP_CLUSTER")
```

For ease comparison,both the hierarchical clustering and spatially constrained hierarchical clustering maps have been placed next to each other.

```{r}
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(shan_sf_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```
