---
title: "In-Class Exercise 1"
editor: visual
---

## Overview

## Getting Started

The code chunk below will install and load sf, tidyverse, spdep, and tmap packages.

```{r}
pacman::p_load(sf, tidyverse, spdep, tmap)
```

## Importing Data

### Importing Shapefile

This code chunk will import ESRI shapefile into R

```{r}
hunan = st_read(dsn = "data/geospatial", layer = "Hunan")
```

### Importing csv File

```{r}
hunan2012 = read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

```{r}
hunan = left_join(hunan,hunan2012)
```

## Visualising Regional Development Indicator

```{r}
basemap = tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## Computing Contiguity Spatial Weights

### Computing (QUEEN) Contiguity Based Neighbours

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

See the neighbors for the first polygon in the object

```{r}
wm_q[[1]]
```

Retrieve the county name of Polygon ID=1

```{r}
hunan$County[1]
```

Reveal county names of the five neighboring polygons

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

Retrieve GDPPC of five countries listed above

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Display complete weight matrix

```{r}
str(wm_q)
```

#### Creating (ROOK) contiguity based neighbours

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

### Visualising Contiguity Weights

Get Longitude values

```{r}
longitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

Get Latitude Values

```{r}
latitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Put longitude and latitude into the same object

```{r}
coords <- cbind(longitude, latitude)
```

Check if object is formatted properly

```{r}
head(coords)
```

#### Plotting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### Plotting both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

## Computing distance based neighbours

### Determine cut-off distance

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Average number of links indicates that each region, on average, have 3.68 neighbours.

Display content wm_d62 weight matrix

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km. We could also plot them seperately as shown below.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### Computing Adaptive Distance Weight Matrix

Control the numbers of neighbours directly using k-nearest neighbours by imposing symmetry as shown below.

```{r}
knn6 = knn2nb(knearneigh(coords, k=6))
knn6
```

Display the content of the matrix

```{r}
str(knn6)
```

#### Plotting distance based neighbours

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weights based on IDW

Compute the distances between areas

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### Row-Standardised Weights Matrix

Assign weights to each neighboring polygon

```{r}
rswm_q = nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

Weight of the first polygon's four neighbor type

```{r}
rswm_q$weights[10]
```

Derive a row standardised distance weight matrix

```{r}
rswm_ids = nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

### Spatial Lag with Row-Standardized Weights

Compute average neighbour GDPPC value for each polygon

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Retrieve GDPPC of these five countries

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Append the spatially lagged GDPPC values onto hunan data frame

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

Average neighboring income values for each country

```{r}
head(hunan)
```

Plot both GDPPC and spatial lag GDPPC for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatial Lag as Sum of Neighboring Values

Calculate spatial lag as a sum of neighboring values by assigning binary weights

```{r}
b_weights = lapply(wm_q, function(x) 0*x + 1)
b_weights2 = nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Compute a lag variable from our weight and GDPPC

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

Examine results

```{r}
lag_sum
```

Append the *lag_sum* GDPPC field into hunan data frame

```{r}
hunan <- left_join(hunan, lag.res)
```

Plot both the GDPPC and Spatial Lag Sum GDPPC for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### Spatial Window Average

Assign k6 to a new variable as its structure will be directly altered to add the diagonal elements

```{r}
wm_q1 <- wm_q
```

Add the diagonal element to the neighbour list

```{r}
include.self(wm_q1)
```

Obtain weights

```{r}
wm_q1 <- nb2listw(wm_q1)
wm_q1
```

Create lag variable from weight structure and GDPPC variable

```{r}
lag_w_avg_gpdpc = lag.listw(wm_q1,hunan$GDPPC)
lag_w_avg_gpdpc
```

Convert lag variable listw object into a data.frame

```{r}
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Append lag_window_avg GDPPC values onto hunan data.frame

```{r}
hunan <- left_join(hunan, lag_wm_q1.res)
```

Plot the GDPPC and lag_window_avg GDPPC map next for quick comparison

```{r}
gdppc = qtm(hunan, "GDPPC")
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### Spatial Window Sum

Assign binary weights to the neighbor structure that includes the diagonal element

```{r}
wm_q1 <- wm_q
```

Add diagonal element to the neighbour list

```{r}
include.self(wm_q1)
```

```{r}
wm_q1
```

Assign binary weights to the neighbour structure that includes the diagonal element

```{r}
b_weights <- lapply(wm_q1, function(x) 0*x + 1)
b_weights[1]
```

Explicitly assign weight values

```{r}
b_weights2 <- nb2listw(wm_q1, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Compute the lag variable

```{r}
w_sum_gdppc = list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Convert the lag variable listw object into a data.frame

```{r}
w_sum_gdppc.res = as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Append w_sum GDPPC values onto hunan data.frame

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Plot the GDPPC and lag_sum GDPPC map for comparison

```{r}
gdppc = qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```
