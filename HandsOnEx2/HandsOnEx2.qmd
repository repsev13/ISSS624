---
title: "Hands-On Exercise 2"
editor: visual
---

## Overview

In this section, I learnt how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package.

## Getting Started

The code chunk below will install and load sf, tidyverse, spdep, and tmap packages.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Importing Data

### Importing Shapefile

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### Importing csv File

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

```{r}
hunan <- left_join(hunan,hunan2012)
```

### Visualising Regional Development Indicator

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## Global Spatial Autocorrelation

### Computing Contiguity Spatial Weights

Compute Queen contiguity weight matrix

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

### Row-Standardised Weights Matrix

Assign weights to each neighboring polygon

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

### Moran's I Test

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

A positive Moran's I statistic reflects that income levels across regions in Hunan are similarly clustered.

#### Computing Monte Carlo Moran's I

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

#### Visualising Monte Carlo Moran's I

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

The curve shows that Moran I values expected that income levels across regions in Hunan are randomly distributed. Since the observed statistic of 0.3008, falls way to the right of the distribution suggests that income across regions are clustered (a positive Moran's I value suggests clustering whereas a negative Moran's I value suggests dispersion).

### Global Spatial Autocorrelation: Geary's

#### Geary's C test

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

A Geary C statistic of 0.6907 is relatively high and represents a positive spatial autocorrelation.

#### Computing Monte Carlo Geary's C

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

The Geary's C value of 0.69072 indicates that positive spatial autocorrelation is occurring

#### Visualising the Monte Carlo Geary's C

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary C")
abline(v=1, col="red") 
```

The curve shows that Geary C values are normally distributed. Since the observed statistic of 0.69072, falls way to the left of the distribution suggests that indicates that positive spatial autocorrelation is occurring.

## Spatial Correlogram

### Compute Moran's I correlogram

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

Examine the full analysis report as not all autocorrelation values are statistically significant.

```{r}
print(MI_corr)
```

The plot shows that autocorrelation values are statistically significant.

### Compute Geary's C Correlogram and Plot

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

Print out analysis report

```{r}
print(GC_corr)
```

## Cluster and Outlier Analysis

### Computing local Moran's I

Compute local Moran's I of GDPPC2012 at the county level

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

List the content of the local Moran matrix derived by using printCoefmat()

```{r}
printCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)
```

#### Mapping the local Moran's I

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### Mapping local Moran's I values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

#### Mapping local Moran's I p-values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

#### Mapping both local Moran's I values and p-values

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## Creating a LISA Cluster Map

### Plotting Moran scatterplot

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

### Plotting Moran scatterplot with standardised variable

Use scale() to centers and scales the variable and as.vector() added to the end is to make sure that the data type we get out of this is a vector.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector 
```

Plot the Moran scatterplot again

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### Preparing LISA map classes

The code chunks below show the steps to prepare a LISA cluster map.

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Center the variable of interest around its mean

```{r}
DV <- hunan$GDPPC - mean(hunan$GDPPC)     
```

Center the local Moran's around the mean

```{r}
C_mI <- localMI[,1] - mean(localMI[,1])    
```

Set a statistical significance level for the local Moran

```{r}
signif <- 0.05       
```

Define the high-high, low-low, low-high and high-low categories

```{r}
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 1      
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
```

Place non-significant Moran in the category 0

```{r}
quadrant[localMI[,5]>signif] <- 0
```

Plotting LISA map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

Plot both local Moran's I values map and its corresponding p-values map next to each other for better intepretation

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

The significant locations are color coded by type of spatial autocorrelation. Hence, having a higher GDPCC does not equate to spatial correlation.

## Hot Spot and Cold Spot Area Analysis

### Getis and Ord's G-Statistics

The analysis consists of three steps:

1.  Deriving spatial weight matrix

2.  Computing Gi statistics

3.  Mapping Gi statistics

### Deriving distance-based weight matrix

Two type of distance-based proximity matrix:

1.  fixed distance weight matrix

2.  adaptive distance weight matrix

### Deriving the centroid

Get longitude

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

Get Latitude

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Put longitude and latitude into the same object

```{r}
coords <- cbind(longitude, latitude)
```

#### Determine the cut-off distance

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

#### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Convert the nb object into spatial weights object

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

### Computing adaptive distance weight matrix

Control the numbers of neighbours directly using k-nearest neighbours by imposing symmetry

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Convert the nb object into spatial weights object

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## Computing Gi statistics

### Gi statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

Join the Gi values to their corresponding hunan data frame

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

### Mapping Gi values with fixed distance weights

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

The choropleth above shows clear sign of east-west divide in the GDP per capita by county of Hunan province in 2012. Where hot spot areas were centrered around Changsha city at the east of the province with greater intensity of clustering.

### Gi statistics using adaptive distance

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### Mapping Gi values with adaptive distance weights

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

By using adaptive distance weights, it can be seen that GDP per capita may be inflated in Changsha given that it is less clustered than that of Ningxiang and Liuyang
