---
title: "Take-Home Exercise 2"
editor: visual
---


## Overview

Developing countries, like Nigeria, are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.

To address the issue of providing clean and sustainable water supply to the Nigerian rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas in Nigeria at the water point or small water scheme level.

## Getting Started

### Packages Used

The R packages used for the analysis are in the code chunk below:


```{r}
pacman::p_load(rgdal, spdep, tmap, ClustGeo, sf,
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally, funModeling)
```


### Datasets Used

| Type       | Name                                                                                                                         | Format    | Description                         |
|------------|------------------------------------------------------------------------------------------------------------------------------|-----------|-------------------------------------|
| Aspatial   | [WPdx Global Data Repositories](https://data.waterpointdata.org/dataset/Water-Point-Data-Exchange-Plus-WPdx-/eqje-vguj/data) | Shapefile | Water Point Data                    |
| Geospatial | [geoBoundaries](https://www.geoboundaries.org/)                                                                              | Shapefile | Political Administrative Boundaries |

## Importing Data

Two datasets will be used namely, geo_export and nga.

### Importing water point geospatial data


```{r}
#| eval: false
wp <- st_read(dsn = "geodata",
              layer = "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria")
```


From the output message, we learn that:

-   Geometry type is point

-   293223 features, 72 fields

-   Assigned CRS is WGS 84, the 'World Geodetic System 1984'


```{r}
#| eval: false
write_rds(wp, "geodata/wp_nga.rds")
```


The extracted data table, wp, has been saved in rds data format as wp_nga.rds.

### Importing Nigeria LGA boundary data


```{r}
#| eval: false
nga <- st_read(dsn = "geodata",
               layer = "NGA",
               crs = 4326)
```


From the output message, we learn that:

-   Geometry type is multipolygon

-   774 features, 5 fields

-   Assigned CRS is WGS 84, the 'World Geodetic System 1984'

## Data Wrangling

### Recoding NA values into string


```{r}
#| eval: false
wp_nga <- read_rds("geodata/wp_nga.rds") %>%
    mutate(status_cle = replace_na(status_cle, "Unknown"))
```


All "NA" values in status_cle field has been recoded into "Unknown"

### Exploratory Data Analysis


```{r}
#| eval: false
freq(data=wp_nga, 
     input = 'status_cle')
```


The status of all water points in Nigeria are displayed above.

## Extracting Water Point Data

### Extracting functional water point


```{r}
#| eval: false
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
#| eval: false
freq(data=wpt_functional, 
     input = 'status_cle')
```


The status of all functional water points in Nigeria are extracted and displayed above.

### Extracting non-functional water point


```{r}
#| eval: false
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

```{r}
#| eval: false
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```


The status of all non-functional water points in Nigeria are extracted and displayed above.

### Extracting water point with Unknown class


```{r}
#| eval: false
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```


The status of all water points with unknown status in Nigeria are extracted.

## Performing Point-in-Polygon Count


```{r}
#| eval: false
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```


The intersections for the various water points are mapped as shown above

## Saving the Analytical Data Table


```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`)
```

```{r}
#| eval: false
write_rds(nga_wp, "geodata/nga_wp.rds")
```


The extracted data table, nga_wp, has been saved in rds data format as nga_wp.rds with pct_functional and pct_non-functional fields.


```{r}
nga_wp <- read_rds("geodata/nga_wp.rds")
```


## Exploratory Data Analysis (EDA)

### EDA using statistical graphics


```{r}
ggplot(data=nga_wp, 
       aes(x=`wpt functional`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```


This shows that the data for functional water points are right skewed.


```{r}
ggplot(data=nga_wp, 
       aes(x=`wpt functional`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```


This identifies the functional water points that are outliers.


```{r}
ggplot(data=nga_wp, 
       aes(x=`pct_functional`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```


This shows that the percentage of functional water points are normally distributed.


```{r}
ggplot(data=nga_wp, 
       aes(x=`pct_functional`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```


This shows that the percentage of functional water points has no outliers.


```{r}
functional <- ggplot(data=nga_wp, 
             aes(x= `pct_functional`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

nonfunctional <- ggplot(data=nga_wp, 
             aes(x= `pct_non-functional`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(functional, nonfunctional, 
          ncol = 2, 
          nrow = 1)
```


This shows that the percentage of functional water points are normally distributed while the percentage of non-functional water points is slightly right skewed.

### EDA using choropleth map


```{r}
qtm(nga_wp, "pct_functional")
```


This choropleth map shows the distribution of the percentage of water points across Nigeria.


```{r}
tm_shape(nga_wp) +
    tm_polygons(c("wpt functional", "pct_functional"),
                style="jenks") +
    tm_facets(sync = TRUE, ncol = 2) +
  tm_legend(legend.position = c("right", "bottom"))+
  tm_layout(outer.margins=0, asp=0)
```


The two choropleth maps show the number of functional water points in comparison to the percentage of functional water points available.

## Hierarchy Cluster Analysis

### Extracting clustering variables

First we will remove the duplicate town names with the code chunks below.


```{r}
nga_wp <- (nga_wp[order(nga_wp$shapeName), ])
duplicate_area <- nga_wp$shapeName[ nga_wp$shapeName %in% nga_wp$shapeName[duplicated(nga_wp$shapeName)] ]

duplicate_area

tmap_mode("view")
tm_shape(nga_wp[nga_wp$shapeName %in% duplicate_area,]) +
  tm_polygons()
```

```{r}
nga_wp$shapeName[c(94,95,304,305,355,356,519,546,547,693,694)] <- c("Bassa (Kogi)","Bassa (Plateau)",
                                                                               "Ifelodun (Kwara)","Ifelodun (Osun)",
                                                                               "Irepodun (Kwara)","Irepodun (Osun)",
                                                                               "Nassarawa","Obi (Benue)","Obi(Nasarawa)",
                                                                               "Surulere (Lagos)","Surulere (Oyo)")

length((nga_wp$shapeName[ nga_wp$shapeName %in% nga_wp$shapeName[duplicated(nga_wp$shapeName)] ]))
```


The clustering variables are extracted from nga_wp into data.frame.


```{r}
cluster_vars <- nga_wp %>%
  st_set_geometry(NULL) %>%
  select("shapeName", "pct_functional", "pct_non-functional")
head(cluster_vars,10)
```


The row numbers have been changed to town name by using the code chunk below.


```{r}
row.names(cluster_vars) <- cluster_vars$"shapeName"
head(cluster_vars,10)
```


The shapeName field has been removed by using the code chunk below.


```{r}
nga_ict <- select(cluster_vars, c(2:3))
head(nga_ict, 10)
```


### Min-Max standardisation


```{r}
nga_ict.std <- normalize(nga_ict)
summary(nga_ict.std)
```


### Z-score standardisation


```{r}
nga_ict.z <- scale(nga_ict)
describe(nga_ict.z)
```


### Visualising the standardised clustering variables


```{r}
r <- ggplot(data=nga_wp, 
             aes(x= `pct_functional`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Raw values without standardisation")

nga_ict_s_df <- as.data.frame(nga_ict.std)
s <- ggplot(data=nga_ict_s_df, 
       aes(x=`pct_functional`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

nga_ict_z_df <- as.data.frame(nga_ict.z)
z <- ggplot(data=nga_ict_z_df, 
       aes(x=`pct_functional`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

```{r}
r <- ggplot(data=nga_wp, 
             aes(x= `pct_functional`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Raw values without standardisation")

nga_ict_s_df <- as.data.frame(nga_ict.std)
s <- ggplot(data=nga_ict_s_df, 
       aes(x=`pct_functional`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Min-Max Standardisation")

nga_ict_z_df <- as.data.frame(nga_ict.z)
z <- ggplot(data=nga_ict_z_df, 
       aes(x=`pct_functional`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```


### Computing proximity matrix


```{r}
nga_ict <- na.omit(nga_ict)
```

```{r}
proxmat <- dist(nga_ict, method = 'euclidean')
proxmat
```


The proximity matrix has been computed as shown above.

### Computing hierarchical clustering


```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D', members = NULL)
```

```{r}
plot(hclust_ward, cex = 0.6)
```


### Selecting the optimal clustering algorithm


```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(nga_ict, method = x)$ac
}

map_dbl(m, ac)
```


With reference to the output above, we can see that Ward's method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward's method will be used.

### Determining Optimal Clusters

#### Gap Statistic Method


```{r}
set.seed(12345)
gap_stat <- clusGap(nga_ict, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

```{r}
fviz_gap_stat(gap_stat)
```


With reference to the gap statistic graph above, the recommended number of cluster to retain is 9.

### Interpreting the dendrograms


```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = 9, 
            border = 2:5)
```


### Visually-driven hierarchical clustering analysis

#### Transforming the data frame into a matrix


```{r}
nga_ict_mat <- data.matrix(nga_ict)
```


The code chunk above transforms shan_ict data frame into a data matrix.

#### Plotting interactive cluster heatmap using heatmaply()


```{r}
heatmaply(normalize(nga_ict_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 9,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Nigeria by ICT indicators",
          xlab = "ICT Indicators",
          ylab = "Towns of Nigeria"
          )
```


An interactive heatmap is built as shown above.

### Mapping the clusters formed


```{r}
groups <- as.factor(cutree(hclust_ward, k=9))
```


The code chunk below derives a 9-cluster model


```{r}
nga_wp2 <- na.omit(nga_wp)
```


This ensures that all NA values are omitted.


```{r}
nga_wp2_cluster <- cbind(nga_wp2, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)
```


In order to visualise the clusters, the groups object need to be appended onto nga_wp2 simple feature object.


```{r}
qtm(nga_wp2_cluster, "CLUSTER")
```


The choropleth map above reveals the clusters are very fragmented which is one of the major limitations when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.

## Spatially Constrained Clustering: SKATER approach

### Converting into SpatialPolygonsDataFrame


```{r}
nga_sp <- as_Spatial(nga_wp2)
```


### Computing Neighbour List


```{r}
nga.nb <- poly2nb(nga_sp)
summary(nga.nb)
```

```{r}
plot(nga_sp, 
     border=grey(.5))
plot(nga.nb, 
     coordinates(nga_sp), 
     col="blue", 
     add=TRUE)
```


### Computing minimum spanning tree

#### Calculating edge costs


```{r}
lcosts <- nbcosts(nga.nb, nga_ict)
```

```{r}
nga.w <- nb2listw(nga.nb, 
                   lcosts, 
                   style="B")
summary(nga.w)
```


### Computing minimum spanning tree


```{r}
nga.mst <- mstree(nga.w)
class(nga.mst)
```

```{r}
dim(nga.mst)
```

```{r}
head(nga.mst)
```


The content of shan.mst is displayed by using head() as shown in the code chunk below.


```{r}
plot(nga_sp, border=gray(.5))
plot.mst(nga.mst, 
         coordinates(nga_sp), 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```


### Computing spatially constrained clusters using SKATER method


```{r}
clust9 <- spdep::skater(edges = nga.mst[,1:2], 
                 data = nga_ict, 
                 method = "euclidean", 
                 ncuts = 8)
```

```{r}
str(clust9)
```

```{r}
ccs9 <- clust9$groups
ccs9
```

```{r}
table(ccs9)
```

```{r}
plot(nga_sp, border=gray(.5))
plot(clust9, 
     coordinates(nga_sp), 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```


### Visualising the clusters in choropleth map


```{r}
groups_mat <- as.matrix(clust9$groups)
nga_sf_spatialcluster <- cbind(nga_wp2_cluster, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
qtm(nga_sf_spatialcluster, "SP_CLUSTER")
```


The code chunk above is used to plot the newly derived clusters by using SKATER method.


```{r}
hclust.map <- qtm(nga_wp2_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(nga_sf_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```


For easy comparison, the hierarchical clustering and spatially constrained hierarchical clustering maps has been placed next to each other.

## Spatially Constrained Clustering: ClustGeo Method

### Ward-like hierarchical clustering: ClustGeo

To perform non-spatially constrained hierarchical clustering, only the function of dissimilarity matrix ism provided as shown in the code chunk below.


```{r}
nongeo_cluster <- hclustgeo(proxmat)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 9, 
            border = 2:5)
```


#### Mapping the clusters formed


```{r}
groups <- as.factor(cutree(nongeo_cluster, k=9))

nga_wp2_ngeo_cluster <- cbind(nga_wp2, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)

qtm(nga_wp2_ngeo_cluster, "CLUSTER")
```


### Spatially Constrained Hierarchical Clustering


```{r}
dist <- st_distance(nga_wp2, nga_wp2)
distmat <- as.dist(dist)

cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=9, graph = TRUE)
```


A spatial distance matrix has been derived by using st_distance() of sf package and choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk above.


```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.3)
```


With reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk above.


```{r}
groups <- as.factor(cutree(clustG, k=9))
```

```{r}
nga_wp2_Gcluster <- cbind(nga_wp2, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```


We will then join back the group list with nga_wp2 polygon feature data frame by using the code chunk above.


```{r}
qtm(nga_wp2_Gcluster, "CLUSTER")
```


## Visual Interpretation of Clusters

### Visualising individual clustering variable


```{r}
ggplot(data = nga_wp2_ngeo_cluster,
       aes(x = CLUSTER, y = pct_functional)) +
  geom_boxplot()
```


The boxplot reveals Cluster 6 displays the highest mean percentage of functional water points. This is followed by Cluster 8, 4, 3, 1, 2, 5, 9 and 7.

